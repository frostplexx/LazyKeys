name: Build and Publish LazyKeys
on:
  push:
    tags:
      - "v*"  # Trigger workflow on version tags (e.g., v1.0.0)
  workflow_dispatch:
    # Allow manual triggering of the workflow
    inputs:
      use_latest_tag:
        description: 'Use latest tag for release'
        required: true
        default: true
        type: boolean
jobs:
  build:
    runs-on: macos-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history and tags
      
      # Set up Swift environment
      - name: Set up Swift
        uses: fwal/setup-swift@v1
        with:
          swift-version: '5.7'
      
      # Get the version from Git
      - name: Get version from Git
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.use_latest_tag }}" == "true" ]]; then
            # For manual triggers, get the latest tag
            VERSION=$(git describe --tags --abbrev=0 || git rev-parse --short HEAD)
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # For tag pushes, get the tag name
            VERSION=${GITHUB_REF#refs/tags/}
          else
            # Fallback
            VERSION=$(git rev-parse --short HEAD)
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Version set to $VERSION"
      
      # Build the app using Make with the version passed as a compile-time variable
      - name: Build the app with Make
        run: |
          make VERSION="${{ env.VERSION }}" build
      
      # Create a tarball for the release
      - name: Create tarball
        run: |
          mkdir -p release
          tar -czf release/lazykeys.tar.gz -C bin lazykeys
          # Calculate SHA-256 for the formula
          SHA=$(shasum -a 256 release/lazykeys.tar.gz | awk '{print $1}')
          echo "SHA256=${SHA}" >> $GITHUB_ENV
      
      # Publish the release on GitHub
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: "Release ${{ env.VERSION }}"
          body: "Release version ${{ env.VERSION }}"
          files: release/lazykeys.tar.gz
          token: ${{ secrets.RELEASE_TOKEN }}
          draft: false
          prerelease: false
      

      - name: Update Homebrew Formula
        run: |
          FORMULA_PATH=/tmp/homebrew-tap/Formula/LazyKeys.rb
          if [ -f "$FORMULA_PATH" ]; then
            # Clone the Homebrew Tap repository
            git clone https://github.com/frostplexx/homebrew-tap.git /tmp/homebrew-tap
      
            # Navigate into the repository
            cd /tmp/homebrew-tap
      
            # Fetch the latest changes to ensure we have the most up-to-date branch
            git fetch origin main
            
            # Checkout to the main branch
            git checkout main
      
            # Update the formula with the new version and URL
            TAR_URL="https://github.com/${{ github.repository }}/releases/download/${{ env.VERSION }}/lazykeys.tar.gz"
            sed -i '' "s|^  url .*|  url \"${TAR_URL}\"|" $FORMULA_PATH
            sed -i '' "s|^  sha256 .*|  sha256 \"${{ env.SHA256 }}\"|" $FORMULA_PATH
      
            # Configure Git for the remote repository
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            
            # Stage the changes
            git add $FORMULA_PATH
      
            # Only commit and push if there are changes
            if ! git diff --cached --quiet; then
              git commit -m "Update formula for version ${{ env.VERSION }}"
              
              # Push using the GITHUB_TOKEN for authentication
              git push https://github.com/frostplexx/homebrew-tap.git HEAD:main
            else
              echo "No changes to commit."
            fi
          else
            echo "Formula file not found at $FORMULA_PATH. Skipping formula update."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      - name: Update lazykeys.nix
        run: |
          NIX_FILE=lazykeys.nix
          TARBALL=release/lazykeys.tar.gz
          if [ -f "$NIX_FILE" ]; then
            # Calculate the SRI sha256 hash
            new_sha256=$(nix hash to-sri --type sha256 "${{ env.SHA256 }}")
            
            # Update version, URL, and hash
            sed -i '' "s|^[[:space:]]*version = \".*\";|  version = \"${{ env.VERSION }}\";|" "$NIX_FILE"
            sed -i '' "s|^[[:space:]]*url = \".*\";|      url = \"https://github.com/${{ github.repository }}/releases/download/${{ env.VERSION }}/lazykeys.tar.gz\";|" "$NIX_FILE"
            sed -i '' "s|^[[:space:]]*hash = \".*\";|      hash = \"${new_sha256}\";|" "$NIX_FILE"
      
            # Configure Git
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
      
            # Stage and commit if there are changes
            git add "$NIX_FILE"
            if ! git diff --cached --quiet; then
              git commit -m "Update lazykeys.nix for version ${{ env.VERSION }}"
              git push origin HEAD:main
            else
              echo "No changes to commit for lazykeys.nix."
            fi
          else
            echo "lazykeys.nix not found. Skipping update."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
